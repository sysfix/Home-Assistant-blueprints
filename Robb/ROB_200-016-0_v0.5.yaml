blueprint:
  name: XYZ.NINJA - DEVELOPMENT - Blueprint for RGB Remote control by ROBB smarrt and Sunricher (Iluminize)
  description: V0.4
  domain: automation
  input:
    remote:
      name: 'Remote'
      description: Select the remote control to use as input device.
      selector:
        device:
          integration: 'zha'
          manufacturer: ROBB smarrt
#          	- 
#          	- Sunricher
#          	- iluminize

    group_1:
      name: Group 1
      description: Light(s) to control when group 1 is selected
      default: []
      selector:
        entity:
          domain: light

    group_2:
      name: Group 2
      description: Light(s) to control when group 2 is selected
      default: []
      selector:
        entity:
          domain: light

    group_3:
      name: Group 3
      description: Light(s) to control when group 3 is selected
      default: []
      selector:
        entity:
          domain: light

    group_4:
      name: Group 4
      description: Light(s) to control when group 4 is selected
      default: []
      selector:
        entity:
          domain: light


    brightness_step_value:
      name: 'Brightness step value'
      description: 'Step value for increasing / decreasing brightness'
      default: 10
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
          
          
mode: parallel
max_exceeded: silent
variables:
  brightness_step_value: !input 'brightness_step_value'
  group_1: !input 'group_1'
  group_2: !input 'group_2'
  group_3: !input 'group_3'
  group_4: !input 'group_4'


trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input 'remote'

action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      endpoint_id: "{{ trigger.event.data.endpoint_id }}"
      light_entity: |-
        {% if endpoint_id == 1 %}
          {{ group_1 }}
        {% elif endpoint_id == 2 %}
          {{ group_2 }}
        {% elif endpoint_id == 3 %}
          {{ group_3 }}
        {% elif endpoint_id == 4 %}
          {{ group_4 }}
        {% endif %}

  - choose:
    - conditions: '{{ command == "on" }}'
      sequence:
      - service: light.turn_on
        data_template:
          entity_id: '{{ light_entity }}'
          transition: 1
          
  - choose:
    - conditions: '{{ command == "off" }}'
      sequence:
      - service: light.turn_off
        data_template:
          entity_id: '{{ light_entity }}'
          transition: 1


  - choose:
    - conditions: '{{ command == "move_to_color" }}'
      sequence:
      - service: light.turn_on
        data_template:
          entity_id: '{{ light_entity }}'
          transition: 1
          xy_color:
            - 0.{{ trigger.event.data.args[0] }}
            - 0.{{ trigger.event.data.args[1] }}

  - choose:
    - conditions: '{{ command == "move_to_color_temp" }}'
      sequence:
      - service: light.turn_on
        data_template:
          entity_id: '{{ light_entity }}'
          transition: 1

  - choose:
    - conditions: '{{ command == "step_with_on_off" }}'
      sequence:
      - service: light.turn_on
        data_template:
          entity_id: '{{ light_entity }}'
          transition: 1

  - choose:
    - conditions: '{{ command == "move_hue" }}'
      sequence:
      - service: light.turn_on
        data_template:
          entity_id: '{{ light_entity }}'
          transition: 1

  - choose:
    - conditions: '{{ command == "recall" }}'
      sequence:
      - service: light.turn_on
        data_template:
          entity_id: '{{ light_entity }}'
          transition: 1





#  - choose:
#    - conditions: '{{ command == "move_to_hue_and_saturation" }}'
#      sequence:
#      - service: light.turn_on
#        data_template:
#          entity_id: '{{ light_entity }}'
#          hs_color: 
#            -  "{{ trigger.event.data.args[0] }}"
#            - "{{ trigger.event.data.args[1] }}"
#
#  - choose:
#    - conditions: '{{ command == "move_to_color_temp" }}'
#      sequence:
#      - service: light.turn_on
#        data_template:
#          entity_id: '{{ light_entity }}'
#          color_temp:   "{{ trigger.event.data.args[0] }}"
